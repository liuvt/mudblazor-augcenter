@page "/products/list"
@using System.Net.Http.Json
@using mudblazor_augcenter.Models
@inject ProductsInit _Products


<MudDataGrid T="Product" MultiSelection="true" Items="@Elements" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
    Hideable="true" RowClick="@RowClicked" SelectedItemsChanged="@SelectedItemsChanged"
    ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
    StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
    Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete"/>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="Product" />
        <Column T="Product" Sortable="false" Filterable="false" Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" >
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItem" />
            </CellTemplate>
        </Column>
        <Column T="Product" Field="ProductId" Title="ID" Sortable="false" Filterable="false" />
        <Column T="Product" Field="ProductSku" Title="Ma SP" />
        <Column T="Product" Field="ProductName" Title="Ten SP" SortBy="@_sortBy" />
        <Column T="Product" Field="ProductCartDesc" Title="T.Hieu"/>
        <Column T="Product" Field="CategoryId">
            <EditTemplate>
                <MudSelect @bind-Value="context.Item.CategoryId" Required RequiredError="You must select a Position!!!" Margin="@Margin.Dense">
                    <MudSelectItem Value="1">Camera</MudSelectItem>
                    <MudSelectItem Value="2">Laptop</MudSelectItem>
                    <MudSelectItem Value="3">Tablet</MudSelectItem>
                </MudSelect>
            </EditTemplate>
        </Column>
        <Column T="Product" Field="ProductPrice" Title="Gia ban"/>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Product" />
    </PagerContent>
</MudDataGrid>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Checked="@_readOnly" Color="Color.Primary">Read Only</MudSwitch>
    <div class="d-flex justify-start align-center">
        <p class="mud-typography mud-typography-body1 mud-inherit-text mr-2">Form</p>
        <MudSwitch @bind-Checked="@_isCellEditMode">Cell</MudSwitch>
    </div>
    <div class="d-flex justify-start align-center">
        <p class="mud-typography mud-typography-body1 mud-inherit-text mr-2">Manual</p>
        <MudSwitch @bind-Checked="@_editTriggerRowClick">On Row Click</MudSwitch>
    </div>
</div>

<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Show Events">
        @foreach (var message in _events)
        {
            <MudText Typo="@Typo.body2">@message</MudText>
        }
        @if(_events.Count > 0) 
        {
            <div class="d-flex">
                <MudSpacer/>
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;


    // events
    void StartedEditingItem(Product item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(Product item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(Product item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    } 

    private IEnumerable<Product> Elements = new List<Product>();
    private string _searchString;
    private bool _sortNameByLength;

    // custom sort by name length
    private Func<Product, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.ProductName.Length;
        else
            return x.ProductName;
    };
    // quick filter - filter gobally across multiple columns with the same input
    private Func<Product, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.ProductName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.ProductCartDesc.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.ProductPrice} {x.ProductId} {x.ProductSku}".Contains(_searchString))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        Elements = _Products.Products;
    }

    // events
    void RowClicked(DataGridRowClickEventArgs<Product> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<Product> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }
}